/*
백준 2933 미네랄

문제
- 막대 던지는 높이 정하면 땅과 수평으로 날아감(창영:왼->오/상근:오->왼)
- 미네랄 만나면 그 칸 미네랄 모두 파괴, 클러스터 분리 시 바닥으로 떨어짐
- 클러스터가 다른 클러스터 위로 떨어지면 합쳐짐
- 막대를 모두 던진 이후 미네랄의 모양
- 1=<R,C<=100, 1<=N<=100

풀이
1. 일단은 던져서 부순다
2. 공중에 떠있는 클러스터가 있는지 확인한다.
	- 어떻게? : 바닥에서부터 클러스터 영역을 체크하면 될것같음!(bfs)
	- 바닥에 연결된 클러스터 영역을 1이라고 하고 아닌걸 2라고 해서 떨구자!
3, 떠있는 놈은 떨군다.(클러스터의 x좌표를 +1 다 해주고 아래에 영역 1인 클러스터 있나 확인)
	- 떠있는 놈은 2 영역 찾으면서 좌표를 저장하는게 편할 것 같다.
*/

#include <iostream>
#include <string>
#include <queue>
#include <vector>

using namespace std;

int N, M;
int cluster[100][100]={0,};
int visit[100][100] = {0,};
vector<pair<int,int>> flying;

int px[4] = {0,0,1,-1};
int py[4] = {1,-1,0,0};

void fallCluster(){
	int x, y;
	int isOn = 0;

	while(true){
		for(int i=0;i<flying.size();i++){
			flying[i].first = flying[i].first+1;
			if(flying[i].first == N-1 || cluster[flying[i].first+1][flying[i].second] == 1){
				isOn = 1;
			}
		}

		if(isOn) break;
	}

	for(int i=0;i<flying.size();i++){
		cluster[flying[i].first][flying[i].second] = 1;
	}

	return;
}

int findArea(int i, int j){
	queue<pair<int,int>> q;
	int x,y;

	if(i==N-1) visit[i][j] = 1;
	else {
		visit[i][j] = 2;
		flying.push_back({i,j});
		cluster[i][j] = 0;
	}

	q.push({i,j});

	while(!q.empty()){
		for(int k=0;k<4;k++){
			x = q.front().first + px[k];
			y = q.front().second + py[k];

			if(x<0||y<0||x>=N||y>=M) continue;
			if(cluster[x][y]==1 && visit[x][y]==0){
				visit[x][y] = visit[q.front().first][q.front().second];
				q.push({x,y});
				if(visit[i][j]==2){
					flying.push_back({x,y});
					cluster[x][y] = 0;
				} 
			}
		}

		q.pop();
	}

	return visit[i][j];
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	char temp;
	int maxThrow;
	int throwHight[100];
	int isCut = 1;

	cin >> N >> M;
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			cin>>temp;
			if(temp=='x') cluster[i][j] = 1;
		}
	}

	cin >> maxThrow;

	for(int k=0;k<maxThrow;k++){
		cin>>throwHight[k];
		throwHight[k] = N - throwHight[k];
	}

	for(int k=0;k<maxThrow;k++){
		if(k%2==0){//왼->오
			for(int i=0;i<M;i++){
				if(cluster[throwHight[k]][i] == 1){
					cluster[throwHight[k]][i] = 0;
					break;
				}
			}
		}else{//오->왼
			for(int i=M-1;i>=0;i--){
				if(cluster[throwHight[k]][i] == 1){
					cluster[throwHight[k]][i] = 0;
					break;
				}
			}
		}

		for(int i=N-1;i>=0;i--){
			for(int j=0;j<M;j++){
				visit[i][j] = 0;
			}
		}

		for(int i=N-1;i>=0;i--){
			for(int j=0;j<M;j++){
				if(cluster[i][j]==1 && visit[i][j] == 0){
					if(findArea(i,j)==2) isCut = 2;
				}
			}
		}

		if(isCut==2){
			fallCluster();
			isCut = 1;
			while(!flying.empty()) flying.pop_back();
		}
	}

	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			if(cluster[i][j]==0) cout<<'.';
			else  cout << 'x';
		}
		cout<<"\n";
	}
}
