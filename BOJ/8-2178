/*
BFS(Breadth First Search) : 너비 우선 탐색
- 현재 상태에서 가장 가까운 정점을 먼저 방문
- queue에 넣고 확인함

미로문제
- 0으로 초기화된 N+1*M+1만들어서 테두리 벽 세우기
- 들렀던 곳 표시하기(몇번째로 들른건지)
*/

#include <iostream>
#include <queue>
#include<tuple>
#include<string>

using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int xPlus[4] = {0,0,1,-1};
	int yPlus[4] = {1,-1,0,0};

	queue<tuple<int, int, int>> q;
	int maze[102][102] ={0,};
	int visit[102][102] = {0,};
	int N, M;
	int x,y, newx, newy;
	string temp;

	cin >> N >> M;
	for(int i=1;i<=N;i++){
		cin>>temp;
		for(int j=1;j<=M;j++){
			maze[i][j] = (int)temp[j-1] - (int)'0';
		}
	}

	q.push({1,1, 1});
	visit[1][1]= 1;
	while(!q.empty()){
		x = get<0>(q.front());
		y = get<1>(q.front());
		for(int i=0;i<4;i++){
			newx = x + xPlus[i];
			newy = y + yPlus[i];

			if(maze[newx][newy]==1&& visit[newx][newy]==0){
				visit[newx][newy] = get<2>(q.front())+1;
				q.push({newx,newy, visit[newx][newy]});
			}
			if(newx==N&&newy==M)break;
		}
		if(newx==N&&newy==M)break;
		q.pop();
	}

	cout << visit[N][M];
}
